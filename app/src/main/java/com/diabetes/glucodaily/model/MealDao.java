package com.diabetes.glucodaily.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEAL".
*/
public class MealDao extends AbstractDao<Meal, Long> {

    public static final String TABLENAME = "MEAL";

    /**
     * Properties of entity Meal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PreGlycemia = new Property(1, String.class, "preGlycemia", false, "PRE_GLYCEMIA");
        public final static Property PosGlycemia = new Property(2, String.class, "posGlycemia", false, "POS_GLYCEMIA");
        public final static Property DosageInsulin = new Property(3, Float.class, "dosageInsulin", false, "DOSAGE_INSULIN");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property SportLevel = new Property(5, Integer.class, "sportLevel", false, "SPORT_LEVEL");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property PathImage = new Property(7, String.class, "pathImage", false, "PATH_IMAGE");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
    };


    public MealDao(DaoConfig config) {
        super(config);
    }
    
    public MealDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PRE_GLYCEMIA\" TEXT," + // 1: preGlycemia
                "\"POS_GLYCEMIA\" TEXT," + // 2: posGlycemia
                "\"DOSAGE_INSULIN\" REAL," + // 3: dosageInsulin
                "\"DATE\" INTEGER," + // 4: date
                "\"SPORT_LEVEL\" INTEGER," + // 5: sportLevel
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"PATH_IMAGE\" TEXT," + // 7: pathImage
                "\"TYPE\" TEXT);"); // 8: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEAL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Meal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String preGlycemia = entity.getPreGlycemia();
        if (preGlycemia != null) {
            stmt.bindString(2, preGlycemia);
        }
 
        String posGlycemia = entity.getPosGlycemia();
        if (posGlycemia != null) {
            stmt.bindString(3, posGlycemia);
        }
 
        Float dosageInsulin = entity.getDosageInsulin();
        if (dosageInsulin != null) {
            stmt.bindDouble(4, dosageInsulin);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        Integer sportLevel = entity.getSportLevel();
        if (sportLevel != null) {
            stmt.bindLong(6, sportLevel);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String pathImage = entity.getPathImage();
        if (pathImage != null) {
            stmt.bindString(8, pathImage);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Meal readEntity(Cursor cursor, int offset) {
        Meal entity = new Meal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // preGlycemia
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // posGlycemia
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // dosageInsulin
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // sportLevel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pathImage
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Meal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPreGlycemia(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPosGlycemia(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDosageInsulin(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSportLevel(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPathImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Meal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Meal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
